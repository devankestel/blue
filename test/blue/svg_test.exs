defmodule Blue.SvgTest do
  use ExUnit.Case
  use Patch

  alias Blue.{Canvas, Color, Sprite, Svg}

  describe "square/2" do
    test "it creates a black square" do
      canvas = Canvas.new()
      sprite = Sprite.new()
      sprite = %{sprite | grid_coordinate: {5, 5}}
      canvas = %{canvas | sprites: [sprite]}

      expected_square =
      """
      <rect
      x="80" y="80"
      style="fill:rgba(0,0,0,1);"
      width="#{canvas.grid_size}" height="#{canvas.grid_size}"/>
      """

      result_square = Svg.square(canvas, sprite)

      assert result_square == expected_square
    end
  end

  describe "get_coordinate/2" do
    test "it gets an svg coordinate from a grid_coordinate" do
      canvas = Canvas.new()
      sprite = Sprite.new()
      sprite = %{sprite | grid_coordinate: {5, 5}}
      canvas = %{canvas | sprites: [sprite]}

      expected_svg_coordinate = {(5-1)*canvas.grid_size, (5-1)*canvas.grid_size}

      coordinate = Svg.get_coordinate(canvas, sprite)

      assert coordinate == expected_svg_coordinate
    end
  end

  describe "get_grid_coordinate/2" do
    test "it gets an svg coordinate from a grid_coordinate" do
      canvas = Canvas.new()
      svg_coordinate = {25, 25}
      expected_grid_coordinate = {2, 2}

      grid_coordinate = Svg.get_grid_coordinate(svg_coordinate, canvas)

      assert grid_coordinate == expected_grid_coordinate
    end
  end

  describe "header/3" do
    test "creates svg header based on canvas params, and not in designer mode" do
      canvas = Canvas.new()
      designer_mode_on = false
      color = :black

      expected_vector_string = "0,0,0,1"
      expected_header =
        """
        <svg phx-window-keydown="keypress"
        version="1.0"
        style="background-color:rgba(0,0,0,1)"
        id="Layer_1"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        width="200" height="400"
        viewBox="0 0 200 400"
        xml:space="preserve">
        """

      patch(Color, :get_vector_string, expected_vector_string)

      header = Svg.header(canvas, designer_mode_on, color)

      assert header == expected_header
      assert_called Color.get_vector_string(color), 1
    end

    test "creates svg header based on canvas params in designer mode" do
      canvas = Canvas.new()
      designer_mode_on = true
      color = :black

      expected_header =
        """
        <svg phx-click="svg_click"
        version="1.0"
        style="background-color:rgba(0,0,0,1)"
        id="Layer_1"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        width="200" height="400"
        viewBox="0 0 200 400"
        xml:space="preserve">
        """

      header = Svg.header(canvas, designer_mode_on, color)

      assert header == expected_header
    end
  end

  describe "ghost/1" do
    test "it creates a ghost" do
      canvas = Canvas.new()
      sprite = %Sprite{
        type: :protagonist,
        color: :black,
        grid_coordinate: {5, 5}
      }
      expected_ghost =
      """
      <svg width="20px" height="20px" x="80" y="80" viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
          <!-- Generator: Sketch 43.2 (39069) - http://www.bohemiancoding.com/sketch -->
          <desc>Created with Sketch.</desc>
          <defs></defs>
          <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
              <g id="ghost_svg_wikipedia" transform="translate(-1.000000, 0.000000)">
                  <path d="M58.05,30.6319355 C56.7890323,29.1648387 55.9674194,28.9780645 54.6629032,29.8683871 C54.0512903,30.2864516 53.0680645,30.9522581 50.5906452,30.8574194 C50.6729032,29.2596774 50.7512903,27.6087097 50.823871,25.8522581 C50.853871,25.1516129 50.8770968,24.6203226 50.8916129,24.2951613 C51.2322581,17.7590323 48.8235484,11.2693548 44.2858065,6.49064516 C40.3132258,2.30612903 35.2383871,-3.55271368e-15 29.9970968,-3.55271368e-15 C24.753871,-3.55271368e-15 19.6790323,2.30612903 15.7054839,6.49064516 C11.1687097,11.2693548 8.76096774,17.76 9.09967742,24.2951613 C9.11903226,24.6270968 9.14129032,25.1729032 9.16935484,25.8929032 C9.24096774,27.6270968 9.31935484,29.2567742 9.40064516,30.836129 C6.93290323,30.9348387 5.95258065,30.2758065 5.34387097,29.8616129 C4.04129032,28.9790323 3.21774194,29.163871 1.95096774,30.6377419 C0.959032258,31.7941935 0.701612903,33.3880645 1.24935484,35.0109677 C2.25096774,37.9819355 5.48516129,40.5464516 10.1632258,42.2080645 C10.89,50.366129 11.8374194,55.1119355 13.0587097,56.7948387 C13.6703226,57.6387097 14.4116129,58.0645161 15.2603226,58.0645161 C16.5319355,58.0645161 17.6758065,57.0851613 18.8874194,56.0477419 C20.1174194,54.9948387 21.3880645,53.906129 22.6490323,53.906129 C24.0570968,53.906129 24.7412903,54.6609677 25.6074194,55.6170968 C26.5558065,56.6622581 27.7335484,57.9629032 30.0019355,57.9629032 C32.2664516,57.9629032 33.4441935,56.6622581 34.3906452,55.6180645 C35.2567742,54.6619355 35.9409677,53.906129 37.3529032,53.906129 C38.61,53.906129 39.8796774,54.9948387 41.1106452,56.0477419 C42.3183871,57.0851613 43.4641935,58.0645161 44.7367742,58.0645161 C45.5854839,58.0645161 46.3248387,57.6377419 46.9345161,56.793871 C48.1577419,55.1032258 49.106129,50.3545161 49.8309677,42.1945161 C55.1922581,40.2619355 57.9483871,37.346129 58.7458065,34.9732258 C59.2954839,33.3367742 59.0487097,31.7941935 58.05,30.6319355 M56.9109677,34.3577419 C56.1416129,36.6454839 52.6751613,39.8719355 45.4383871,41.4348387 C44.9148387,41.5470968 44.583871,42.0619355 44.6951613,42.5845161 C44.793871,43.0383871 45.1945161,43.3480645 45.6406452,43.3480645 C45.7083871,43.3480645 45.7770968,43.3412903 45.8467742,43.3267742 C46.5406452,43.1767742 47.193871,43.0074194 47.8267742,42.8293548 C47.0254839,51.4025806 46.1070968,54.6377419 45.3667742,55.6596774 C45.026129,56.1290323 44.8093548,56.1290323 44.7377419,56.1290323 C44.1803226,56.1290323 43.2183871,55.3035484 42.3696774,54.5767742 C40.9422581,53.3545161 39.326129,51.9706452 37.3529032,51.9706452 C35.0825806,51.9706452 33.903871,53.2722581 32.9564516,54.3183871 C32.0903226,55.2725806 31.4080645,56.0274194 30.0019355,56.0274194 C28.5919355,56.0274194 27.9077419,55.2725806 27.0416129,54.3164516 C26.0941935,53.2712903 24.9154839,51.9706452 22.6490323,51.9706452 C20.673871,51.9706452 19.0558065,53.3554839 17.6283871,54.5767742 C16.7796774,55.3045161 15.8158065,56.1290323 15.2603226,56.1290323 C15.1887097,56.1290323 14.9690323,56.1290323 14.6274194,55.6587097 C13.89,54.6416129 12.9716129,51.4122581 12.1722581,42.8390323 C12.8129032,43.0170968 13.4680645,43.1816129 14.1493548,43.3277419 C14.2170968,43.3422581 14.2858065,43.3480645 14.3516129,43.3480645 C14.7996774,43.3480645 15.2003226,43.0374194 15.2990323,42.5816129 C15.4083871,42.0590323 15.0764516,41.5451613 14.5529032,41.4329032 C7.32290323,39.8922581 3.85645161,36.6774194 3.08516129,34.3925806 C2.85290323,33.7035484 2.72225806,32.7125806 3.42193548,31.8996774 C3.7316129,31.5396774 3.91354839,31.3741935 4.00935484,31.3006452 C4.08483871,31.346129 4.1816129,31.4119355 4.25903226,31.4651613 C5.3816129,32.2248387 7.47,33.6425806 14.0177419,32.0758065 C14.5374194,31.9509677 14.8587097,31.4293548 14.733871,30.9096774 C14.6090323,30.39 14.0893548,30.0706452 13.5677419,30.1935484 C12.7364516,30.3929032 12,30.5341935 11.3312903,30.6377419 C11.2529032,29.1125806 11.1774194,27.5206452 11.1067742,25.8125806 C11.0767742,25.0848387 11.0516129,24.5312903 11.0351613,24.1954839 C10.7235484,18.1867742 12.9387097,12.2196774 17.1116129,7.82322581 C20.7164516,4.02677419 25.2919355,1.93645161 29.9980645,1.93645161 C34.7022581,1.93645161 39.2806452,4.02677419 42.8845161,7.82322581 C47.0583871,12.2196774 49.2735484,18.1867742 48.9590323,24.1954839 C48.9416129,24.5254839 48.9212903,25.0635484 48.8932258,25.7729032 C48.8216129,27.506129 48.7441935,29.1183871 48.6658065,30.6629032 C48.0048387,30.5622581 47.2790323,30.423871 46.4612903,30.2303226 C45.9358065,30.1093548 45.42,30.4296774 45.2951613,30.9493548 C45.1722581,31.47 45.4954839,31.9906452 46.0151613,32.1145161 C52.5512903,33.656129 54.6358065,32.2335484 55.7564516,31.4670968 C55.833871,31.413871 55.9287097,31.3490323 56.0041935,31.3025806 C56.1009677,31.3780645 56.2780645,31.5406452 56.5809677,31.8929032 C57.2680645,32.6932258 57.1393548,33.6754839 56.9109677,34.3577419" id="Shape" fill="#6BFFD0" fill-rule="nonzero"></path>
                  <path d="M56.9109677,34.3577419 C56.1416129,36.6454839 52.6751613,39.8719355 45.4383871,41.4348387 C44.9148387,41.5470968 44.583871,42.0619355 44.6951613,42.5845161 C44.793871,43.0383871 45.1945161,43.3480645 45.6406452,43.3480645 C45.7083871,43.3480645 45.7770968,43.3412903 45.8467742,43.3267742 C46.5406452,43.1767742 47.193871,43.0074194 47.8267742,42.8293548 C47.0254839,51.4025806 46.1070968,54.6377419 45.3667742,55.6596774 C45.026129,56.1290323 44.8093548,56.1290323 44.7377419,56.1290323 C44.1803226,56.1290323 43.2183871,55.3035484 42.3696774,54.5767742 C40.9422581,53.3545161 39.326129,51.9706452 37.3529032,51.9706452 C35.0825806,51.9706452 33.903871,53.2722581 32.9564516,54.3183871 C32.0903226,55.2725806 31.4080645,56.0274194 30.0019355,56.0274194 C28.5919355,56.0274194 27.9077419,55.2725806 27.0416129,54.3164516 C26.0941935,53.2712903 24.9154839,51.9706452 22.6490323,51.9706452 C20.673871,51.9706452 19.0558065,53.3554839 17.6283871,54.5767742 C16.7796774,55.3045161 15.8158065,56.1290323 15.2603226,56.1290323 C15.1887097,56.1290323 14.9690323,56.1290323 14.6274194,55.6587097 C13.89,54.6416129 12.9716129,51.4122581 12.1722581,42.8390323 C12.8129032,43.0170968 13.4680645,43.1816129 14.1493548,43.3277419 C14.2170968,43.3422581 14.2858065,43.3480645 14.3516129,43.3480645 C14.7996774,43.3480645 15.2003226,43.0374194 15.2990323,42.5816129 C15.4083871,42.0590323 15.0764516,41.5451613 14.5529032,41.4329032 C7.32290323,39.8922581 3.85645161,36.6774194 3.08516129,34.3925806 C2.85290323,33.7035484 2.72225806,32.7125806 3.42193548,31.8996774 C3.7316129,31.5396774 3.91354839,31.3741935 4.00935484,31.3006452 C4.08483871,31.346129 4.1816129,31.4119355 4.25903226,31.4651613 C5.3816129,32.2248387 7.47,33.6425806 14.0177419,32.0758065 C14.5374194,31.9509677 14.8587097,31.4293548 14.733871,30.9096774 C14.6090323,30.39 14.0893548,30.0706452 13.5677419,30.1935484 C12.7364516,30.3929032 12,30.5341935 11.3312903,30.6377419 C11.2529032,29.1125806 11.1774194,27.5206452 11.1067742,25.8125806 C11.0767742,25.0848387 11.0516129,24.5312903 11.0351613,24.1954839 C10.7235484,18.1867742 12.9387097,12.2196774 17.1116129,7.82322581 C20.7164516,4.02677419 25.2919355,1.93645161 29.9980645,1.93645161 C34.7022581,1.93645161 39.2806452,4.02677419 42.8845161,7.82322581 C47.0583871,12.2196774 49.2735484,18.1867742 48.9590323,24.1954839 C48.9416129,24.5254839 48.9212903,25.0635484 48.8932258,25.7729032 C48.8216129,27.506129 48.7441935,29.1183871 48.6658065,30.6629032 C48.0048387,30.5622581 47.2790323,30.423871 46.4612903,30.2303226 C45.9358065,30.1093548 45.42,30.4296774 45.2951613,30.9493548 C45.1722581,31.47 45.4954839,31.9906452 46.0151613,32.1145161 C52.5512903,33.656129 54.6358065,32.2335484 55.7564516,31.4670968 C55.833871,31.413871 55.9287097,31.3490323 56.0041935,31.3025806 C56.1009677,31.3780645 56.2780645,31.5406452 56.5809677,31.8929032 C57.2680645,32.6932258 57.1393548,33.6754839 56.9109677,34.3577419" id="body" fill="#6BD06B"></path>
                  <path d="M39.0996774,14.2325806 C35.4619355,14.2325806 32.5035484,17.5345161 32.5035484,21.5932258 C32.5035484,25.6490323 35.4629032,28.9490323 39.0996774,28.9490323 C42.7383871,28.9490323 45.6977419,25.65 45.6977419,21.5932258 C45.6987097,17.5345161 42.7383871,14.2325806 39.0996774,14.2325806 M39.0996774,27.4974194 C36.2622581,27.4974194 33.9551613,24.8496774 33.9551613,21.5932258 C33.9551613,18.3348387 36.2632258,15.6841935 39.0996774,15.6841935 C41.9380645,15.6841935 44.246129,18.3348387 44.246129,21.5932258 C44.2470968,24.8496774 41.9380645,27.4974194 39.0996774,27.4974194" id="Shape" fill="#FF6B6B" fill-rule="nonzero"></path>
                  <path d="M39.0996774,27.4974194 C36.2622581,27.4974194 33.9551613,24.8496774 33.9551613,21.5932258 C33.9551613,18.3348387 36.2632258,15.6841935 39.0996774,15.6841935 C41.9380645,15.6841935 44.246129,18.3348387 44.246129,21.5932258 C44.2470968,24.8496774 41.9380645,27.4974194 39.0996774,27.4974194" id="white_of_right_eye" fill="#FFFD81"></path>
                  <path d="M39.0996774,17.2364516 C36.9716129,17.2364516 35.2441935,19.1825806 35.2441935,21.5903226 C35.2441935,23.9941935 36.9716129,25.946129 39.0996774,25.946129 C41.2277419,25.946129 42.9532258,23.9941935 42.9532258,21.5903226 C42.9541935,19.1816129 41.2287097,17.2364516 39.0996774,17.2364516" id="pupil_of_right_eye" fill="#80ACFF" fill-rule="nonzero"></path>
                  <path d="M32.1880645,19.6316129 C32.1880645,14.3525806 28.1758065,10.0577419 23.2422581,10.0577419 C18.3116129,10.0577419 14.3003226,14.3525806 14.3003226,19.6316129 C14.3003226,24.9048387 18.3125806,29.1948387 23.2422581,29.1948387 C28.1748387,29.1948387 32.1880645,24.9048387 32.1880645,19.6316129 M15.7509677,19.6316129 C15.7509677,15.1529032 19.1119355,11.5093548 23.2412903,11.5093548 C27.3745161,11.5093548 30.7354839,15.1529032 30.7354839,19.6316129 C30.7354839,24.1045161 27.3735484,27.7432258 23.2412903,27.7432258 C19.1119355,27.7432258 15.7509677,24.1045161 15.7509677,19.6316129" id="Shape" fill="#FF6B6B" fill-rule="nonzero"></path>
                  <path d="M15.7509677,19.6316129 C15.7509677,15.1529032 19.1119355,11.5093548 23.2412903,11.5093548 C27.3745161,11.5093548 30.7354839,15.1529032 30.7354839,19.6316129 C30.7354839,24.1045161 27.3735484,27.7432258 23.2412903,27.7432258 C19.1119355,27.7432258 15.7509677,24.1045161 15.7509677,19.6316129" id="white_of_left_eye" fill="#FFFD81"></path>
                  <path d="M28.6403226,19.6258065 C28.6403226,16.4158065 26.2229032,13.8193548 23.2422581,13.8193548 C20.2616129,13.8193548 17.846129,16.4158065 17.846129,19.6258065 C17.846129,22.8329032 20.2616129,25.4322581 23.2422581,25.4322581 C26.2229032,25.4322581 28.6403226,22.833871 28.6403226,19.6258065" id="pupil_of_left_eye" fill="#80ACFF" fill-rule="nonzero"></path>
                  <path d="M18.9909677,32.2906452 C18.9909677,34.4564516 20.3641935,36.4548387 22.56,37.8967742 C22.4758065,38.5751613 22.4748387,39.4306452 22.4748387,40.4893548 C22.4748387,45.783871 25.6964516,49.2048387 30.6832258,49.2048387 C35.6709677,49.2048387 38.8935484,45.783871 38.8935484,40.4854839 C38.8935484,39.33 38.8925806,38.5141935 38.8180645,37.8919355 C41.0070968,36.4490323 42.3774194,34.4535484 42.3774194,32.2906452 C42.3774194,32.2906452 36.8090323,33.5332258 30.6832258,33.5332258 C24.5574194,33.5332258 18.9909677,32.2906452 18.9909677,32.2906452 M30.6832258,47.7532258 C27.416129,47.7532258 23.9264516,45.8448387 23.9264516,40.4893548 C23.9264516,37.2919355 23.9264516,37.2919355 24.9822581,37.2919355 C25.3877419,37.2919355 25.8880645,37.3258065 26.5054839,37.3674194 C27.2932258,37.4206452 28.316129,37.4864516 29.5683871,37.5145161 L30.6832258,45.9222581 L31.7980645,37.5145161 C33.0512903,37.4864516 34.076129,37.4196774 34.863871,37.3674194 C35.4822581,37.3258065 35.9816129,37.2919355 36.3870968,37.2919355 C37.166129,37.2919355 37.2135484,37.413871 37.2687097,37.5551613 C37.4419355,37.9954839 37.4419355,38.9864516 37.4419355,40.4883871 C37.4419355,45.8448387 33.9503226,47.7532258 30.6832258,47.7532258" id="Shape" fill="#FF6B6B" fill-rule="nonzero"></path>
                  <path d="M30.6832258,47.7532258 C27.416129,47.7532258 23.9264516,45.8448387 23.9264516,40.4893548 C23.9264516,37.2919355 23.9264516,37.2919355 24.9822581,37.2919355 C25.3877419,37.2919355 25.8880645,37.3258065 26.5054839,37.3674194 C27.2932258,37.4206452 28.316129,37.4864516 29.5683871,37.5145161 L30.6832258,45.9222581 L31.7980645,37.5145161 C33.0512903,37.4864516 34.076129,37.4196774 34.863871,37.3674194 C35.4822581,37.3258065 35.9816129,37.2919355 36.3870968,37.2919355 C37.166129,37.2919355 37.2135484,37.413871 37.2687097,37.5551613 C37.4419355,37.9954839 37.4419355,38.9864516 37.4419355,40.4883871 C37.4419355,45.8448387 33.9503226,47.7532258 30.6832258,47.7532258" id="Path" fill="#FFD081"></path>
              </g>
          </g>
      </svg>
      """

      ghost = Svg.ghost(canvas, sprite)

      assert ghost == expected_ghost
    end
  end

  describe "footer/0" do
    test "creates svg header based on canvas params" do
      expected_footer = "</svg>"

      footer = Svg.footer()

      assert footer == expected_footer
    end
  end
end
